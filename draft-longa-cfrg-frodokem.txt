



CFRG                                                          Y. N. Here
Internet-Draft                                    Your Organization Here
Intended status: Informational                             23 April 2024
Expires: 25 October 2024


         FrodoKEM: key encapsulation from learning with errors
                    draft-longa-cfrg-frodokem-latest

Abstract

   This memo specifies FrodoKEM, an IND-CCA2 secure Key Encapsulation
   Mechanism (KEM).

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://example.com/LATEST.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-longa-cfrg-
   frodokem/.

   Discussion of this document takes place on the WG Working Group
   mailing list (mailto:WG@example.com), which is archived at
   https://example.com/WG.

   Source for this draft and an issue tracker can be found at
   https://github.com/USER/REPO.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 25 October 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Overview
   4.  Supporting functions
     4.1.  Matrix encoding of bit strings
   5.  FrodoKEM
     5.1.  Key Generation
     5.2.  Encapsulation
     5.3.  Decapsulation
   6.  Parameter Sets
   7.  Security Considerations
   8.  IANA Considerations
   9.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   FrodoKEM is a conservative yet practical post-quantum key
   encapsulation mechanism whose security derives from cautious
   parameterizations of the well-studied learning with errors problem,
   which in turn has close connections to conjectured-hard problems on
   generic, "algebraically unstructured" lattices.

   As a key encapsulation mechanism, FrodoKEM is a three-tuple of
   algorithms (_KeyGen_, _Encapsulate_, _Decapsulate_):

   *  _KeyGen_ takes no inputs, requires randomness, and outputs a
      private key and a public key;

   *  _Encapsulate_ takes as input a public key, requires randomness,
      and outputs a ciphertext and a shared secret;

   *  _Decapsulate_ takes as input a ciphertext and a private key, and
      outputs a shared secret.

   These algorithms are assembled as a two-pass protocol that allows two
   parties to derive a shared secret.  This shared secret can then be
   used to establish a secure communication channel using a symmetric-
   key algorithm.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Overview

4.  Supporting functions

4.1.  Matrix encoding of bit strings

   We define how bit strings are encoded as mod-q integer matrices.

   Recall that 2^B <= q.  The encoding function ec() encodes an integer
   0 <= val < 2^B as an element in Z_q by multiplying it by q/2^B =
   2^(D-B):

   ec(val) = val * q/2^B.

   Using this function, the function Encode(b) encodes a given bit
   string b = (b_0, ..., b_(l-1)) of length l = B * nHat^2 as an nHat *
   nHat matrix C with coefficients C_(i,j) in Z_q by applying ec(\cdot)
   to B-bit sub-strings sequentially and filling the matrix row by row
   entry-wise.  The function Encode(b) is defined as follows.

   1.  For i = 0 to nHat - 1 do

       1.  For j = 0 to nHat - 1 do

           1.  val = 0

           2.  For k = 0 to B - 1 do

               1.  val = val + b_((i*nHat + j)B + k) * 2^k

           3.  End for

           4.  Set C_(i,j) = val * q/2^B

       2.  End for

   2.  End for

   3.  Return C

   The corresponding decoding function Decode(C) decodes an nHat * nHat
   matrix C into a bit string of length l = B * nHat^2.  It extracts B
   bits from each entry by applying the function dc():

   dc(c) = \lfloor c * 2^B/q \rceil mod 2^B.

   That is, the Z_q-entry is interpreted as an integer, then divided by
   q/2^B and rounded.  This amounts to rounding to the B most
   significant bits of each entry.  With these definitions, it is the
   case that dc(ec(val)) = val for all 0 ≤ val < 2^B.  The function
   Decode(C) is defined as follows.

   1.  For i = 0 to nHat - 1 do

       1.  For j = 0 to nHat - 1 do

           1.  c = \lfloor C_(i,j) * 2^B/q \rceil mod 2^B

           2.  Set c = c_0 * 2^0 + c_1 * 2^1 + ... + c_(B-1) * 2^(B-1)

           3.  For k = 0 to B - 1 do

               1.  b_((i*nHat + j)B + k) = c_k

           4.  End for

       2.  End for

   2.  End for

   3.  Return (b_0, ..., b_(l-1)).

5.  FrodoKEM

5.1.  Key Generation

   The key generation algorithm accepts no input, requires randomness,
   and outputs the keypair (pk, sk) = (seedA || b, s || seedA || b ||
   S^T || pkh).

   1.   Choose uniformly random seeds s, seedSE and z of bitlengths
        lensec, lenSE and lenA (resp.)

   2.   Generate pseudorandom seed seedA = SHAKE256(z, lenA)

   3.   Generate the matrix A = Gen(seedA)

   4.   Generate pseudorandom bit string (r^(0), r^(1), ..., r^(2*n*nHat
        - 1)) = SHAKE256(0x5F || seedSE, 32*n*nHat)

   5.   Sample error matrix S^T = SampleMatrix((r^(0), r^(1), ...,
        r^(n*nHat − 1)), nHat, n)

   6.   Sample error matrix E = SampleMatrix((r^(n*nHat), r^(n*nHat +
        1), ..., r^(2*n*nHat − 1)), n, nHat)

   7.   Compute matrix B = A*S + E

   8.   Compute b = Pack(B)

   9.   Compute pkh = SHAKE256(seedA || b, lensec)

   10.  Return public key pk = (seedA || b) and secret key sk = (s ||
        seedA || b || S^T || pkh).  ST = S^T is encoded row-by-row from
        ST_(0,0) to ST_(nHat−1,n−1), where each matrix coefficient
        ST_(i,j) is a signed integer encoded as a 16-bit string in the
        little-endian byte order such that (s_0, s_1, ..., s_15) =
        ST_(i,j) = −s_15 * 2^15 + (s_0 + s_1 * 2 + s_2 * 2^2 + ... +
        s_14 * 2^14)

5.2.  Encapsulation

   The encapsulation algorithm takes as input a public key pk =
   (seedA || b), and outputs a ciphertext c = (c1 || c2 || salt) and a
   shared secret ss.

   1.   Choose uniformly random values u and salt of bitlengths lensec
        and lensalt (resp.)

   2.   Compute pkh = SHAKE256(pk, lensec)

   3.   Generate pseudorandom values seedSE || k = SHAKE256(pkh || u ||
        salt, lenSE+lensec)

   4.   Generate pseudorandom bit string (r^(0), r^(1), ..., r^(2*nHat*n
        + nHat^2 - 1)) = SHAKE256(0x96 || seedSE, 16(2*nHat*n + nHat^2))

   5.   Sample error matrix S' = SampleMatrix((r^(0), r^(1), ...,
        r^(nHat*n - 1)), nHat, n)

   6.   Sample error matrix E' = SampleMatrix((r^(nHat*n), r^(nHat*n +
        1), ..., r^(2*nHat*n - 1)), nHat, n)

   7.   Generate the matrix A = Gen(seedA)

   8.   Compute matrix B' = S'*A + E'

   9.   Compute c1 = Pack(B')

   10.  Sample error matrix E" = SampleMatrix((r^(2*nHat*n), r^(2*nHat*n
        + 1), ..., r^(2*nHat*n + nHat^2 - 1)), nHat, nHat)

   11.  Compute matrix B = Unpack(b, n, nHat)

   12.  Compute matrix V = S'*B + E"

   13.  Compute matrix C = V + Encode(u)

   14.  Compute c2 = Pack(C)

   15.  Compute ss = SHAKE256(c1 || c2 || salt ||k, lensec)

   16.  Return ciphertext c = (c1 || c2 || salt) and shared secret ss

5.3.  Decapsulation

   The decapsulation algorithm takes as input a ciphertext c = (c1 ||
   c2 || salt) and a secret key sk = (s || seedA || b || S^T || pkh),
   and outputs a shared secret ss.

   1.   Compute matrix B' = Unpack(c1, nHat, n)

   2.   Compute matrix C = Unpack(c2, nHat, nHat)

   3.   Compute matrix M = C - B'*S

   4.   Compute u' = Decode(M)

   5.   Generate pseudorandom values seedSE' || k' = SHAKE256(pkh ||
        u' ||salt, lenSE+lensec)

   6.   Generate pseudorandom bit string (r^(0), r^(1), ..., r^(2*nHat*n
        + nHat^2 - 1)) = SHAKE256(0x96 || seedSE', 16 (2*nHat*n +
        nHat^2))

   7.   Sample error matrix S' = SampleMatrix((r^(0), r^(1), ...,
        r^(nHat*n - 1)), nHat, n)

   8.   Sample error matrix E' = SampleMatrix((r^(nHat*n), r^(nHat*n +
        1), ..., r^(2*nHat*n - 1)), nHat, n)

   9.   Generate the matrix A = Gen(seedA)

   10.  Compute matrix B" = S'*A + E'

   11.  Sample error matrix E" = SampleMatrix((r^(2*nHat*n), r^(2*nHat*n
        + 1), ..., r^(2*nHat*n+ nHat^2 - 1)), nHat, nHat)

   12.  Compute matrix B = Unpack(b, n, nHat)

   13.  Compute matrix V = S'*B + E"

   14.  Compute matrix C' = V + Encode(u')

   15.  If B' = B" and C = C' then kHat = k' else kHat = s

   16.  Compute ss = SHAKE256(c1 || c2 || salt || kHat, lensec)

   17.  Return shared secret ss

6.  Parameter Sets

7.  Security Considerations

   FrodoKEM-640, FrodoKEM-976 and FrodoKEM-1344 are designed to be post-
   quantum IND-CCA2 secure KEMs at the security levels of AES-128,
   AES-192 and AES-256, respectively.

   Users are recommended to use the highest possible security level that
   a given application allows.  In particular, the designers of FrodoKEM
   recommend to use either FrodoKEM-976 or FrodoKEM-1344 for most
   applications, and limit the use of FrodoKEM-640 to applications that
   require short-term security.

   Lattice-based cryptographic schemes such as FrodoKEM are still
   relatively young.  Therefore, it is recommended to use FrodoKEM in
   combination with a classical scheme (e.g., based on elliptic curves)
   while our confidence in the security of lattice schemes increases
   over time.

8.  IANA Considerations

   This document has no IANA actions.

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Your Name Here
   Your Organization Here
   Email: your.email@example.com
